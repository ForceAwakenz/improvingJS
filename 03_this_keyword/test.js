// 'use strict';

var a = {
    b: 5,
    getB: function() {
     return this.b;
    }
};
   
a.getB(); // какой будет результат здесь?
// метод вызывается объектом а, поэтому результатом будет 5
var fn = a.getB;
fn(); // какой будет результат здесь?
// в переменную fn мы добавили ссылку на метод getB, но функция вызывается в глобальной области 
// и не привязана ни к какому объекту, поэтому результатом будет undefined
// Я не учел, что мы обращаемся не просто к неинициаллизированному объекту, а к его свойству,
// Поэтому будет ошибка в стрикт мод
// Так что для режима без стрикта мой ответ остается прежним, а для стрикта выдаст ошибку
// Чтоб не выдало ошибку, мы можем написать return this?.b
fn.b = 99;
fn(); // какой будет результат здесь?
// поскольку функция в JS тоже является объектом, то мы можем спокойно добавлять 
// ей параметры, как обычному объекту и обращаться к ним
// тем не менее - функция по прежнему вызвана с глобальной области и не привязана ни к какому объекту
// поэтому результат будет тем же - undefined
// Вот как бы сработало:
fn.call(fn);